# https://www.elastic.co/guide/en/logstash/current/event-dependent-configuration.html
# don't filter type to be syslog (if [type] == "syslog")
# because we consider all udp to be syslog

filter {
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "index_type", "%{syslog_program}" ]
    }

    date {
      match => [ "syslog_timestamp", "MMM d HH:mm:ss.SSS" ]
      locale => "en"
      timezone => "Europe/Moscow"
      target => "@timestamp"
    }

    syslog_pri {
    }

    if "_grokparsefailure" in [tags] {
        mutate {
            add_field => [ "index_type", "error" ]
        }
    }

#    if [index_type] == "nginx" {
#        grok {
#            match => { "syslog_message" => "%{COMBINEDAPACHELOG} %{NUMBER:request_time} %{IPORHOST:vhost} (?:%{POSINT:msisdn})?" }
#            add_tag => [ "nginx_log", "access" ]
#        }
#        grok {
#            match => { "syslog_message" => "%{GREEDYDATA:raw_timestamp} \[%{LOGLEVEL:loglevel}\] %{POSINT:pid}#%{NUMBER:tid}: %{GREEDYDATA:error_message}, request: \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\", upstream: %{QS:upstream}, host: \"%{IPORHOST:vhost}\"" }
#            add_tag => [ "nginx_log", "error" ]
#        }
#        date {
#            match => [ "raw_timestamp", "yyyy/MM/dd HH:mm:ss" ]
#            target => "@timestamp"
#            remove_field => [ "raw_timestamp" ]
#        }
#
#        if "nginx_log" in [tags] and "_grokparsefailure" in [tags] {
#            mutate {
#                remove_tag => [ "_grokparsefailure" ]
#            }
#        }
#    }
}
