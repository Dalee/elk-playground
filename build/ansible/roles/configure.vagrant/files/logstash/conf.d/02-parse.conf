filter {
    # backend udp logger processing
    if [type] == "backend" {
        grok {
          match => {
            "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
          }
          add_field => {
            "index_name" => "backend-%{syslog_program}"
          }
        }
    }

    # nginx access_log processing
    if [type] == "frontend-access" {
        grok {
          break_on_match => false
          match => {
            "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
            "syslog_message" => "%{IPORHOST:remote_addr} \"%{NOTSPACE:http_host}\" %{WORD:http_method} \"%{GREEDYDATA:http_uri}\" \"%{GREEDYDATA:http_referer}\" \"%{GREEDYDATA:http_user_agent}\" %{NUMBER:http_status} %{NUMBER:http_length} (?:%{WORD:geo_country}|-) (?:%{NUMBER:geo_latitude}|-) (?:%{NUMBER:geo_longitude}|-)"
          }
          add_field => [ "index_name", "frontend-access" ]
        }

        # parse user-agent into structure and remove original field
        useragent {
            source => "http_user_agent"
            target => "user_agent"
            remove_field => [ "http_user_agent" ]
        }

        # if nginx provides geo_country, use it
        if [geo_country] {
          mutate {
            add_field => [ "[geoip][country]", "%{geo_country}" ]
          }
        }

        # if nginx provided geo_latitude and geo_longitude, use it
        # otherwise, logstash fatal error could happen
        if [geo_latitude] and [geo_longitude] {
          mutate {
            add_field => [ "[geoip][coordinates]", "%{geo_latitude}, %{geo_longitude}" ]
          }
        }

        # parse all http_* headers and properties into nice request and response structure
        mutate {
          add_field => {
            "[request][remote_addr]" => "%{remote_addr}"
            "[request][host]" => "%{http_host}"
            "[request][method]" => "%{http_method}"
            "[request][uri]" => "%{http_uri}"
            "[request][referer]" => "%{http_referer}"

            "[response][status]" => "%{http_status}"
            "[response][length]" => "%{http_length}"
          }
        }

        # remove parsed flags
        mutate {
          remove_field => [
            "syslog_message",
            "remote_addr",
            "http_host",
            "http_method",
            "http_uri",
            "http_referer",
            "http_status",
            "http_length",
            "geo_country",
            "geo_longitude",
            "geo_latitude"
          ]
        }
    }

    # nginx error_log processing
    if [type] == "frontend-error" {
        grok {
          match => {
            "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
          }
          add_field => {
            "index_name" => "frontend-error"
          }
        }
    }

    # parse syslog_pri (extract, facility and severity)
    syslog_pri {
    }

    # parse date
    date {
      match => [ "syslog_timestamp", "MMM d HH:mm:ss.SSS" ]
      locale => "en"
      timezone => "Europe/Moscow"
      target => "@timestamp"
    }

    # if error found, mutate to logstash-error-YYYY.dd.mm
    if "_grokparsefailure" in [tags] {
        mutate {
            add_field => [ "index_name", "error" ]
        }
    }

    # just remove all unused fields
    # and make severity, facility and payload great again
    mutate {
        add_field => {
            "severity" => "%{syslog_severity}"
            "facility" => "%{syslog_facility}"
        }
        remove_field => [
            "host",
            "tags",
            "syslog_pid",
            "message",
            "type",
            "syslog_pri",
            "syslog_severity",
            "syslog_facility",
            "syslog_timestamp",
            "syslog_hostname",
            "syslog_program",
            "syslog_facility_code",
            "syslog_severity_code"
        ]
    }
}
