# https://www.elastic.co/guide/en/logstash/current/event-dependent-configuration.html
#
# here we go:
#  * backend - message is unparsed, just raw log entry for syslog_message, entry will be written to logstash-{program_name} index
#  * frontend-access - message is treated as nginx access_log entry
#  * frontend-error - message is treated as nginx error_log entry, but will be unparsed anyway
#  * all unparsed messages will go to logstash-error index

filter {
    # backend syslog processing
    if [type] == "backend" {
        grok {
          match => {
            "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
          }
          add_field => [ "index_name", "%{syslog_program}" ]
        }

        date {
          match => [ "syslog_timestamp", "MMM d HH:mm:ss.SSS" ]
          locale => "en"
          timezone => "UTC"
          target => "@timestamp"
        }

    }

    # frontend-access nginx syslog processing
    if [type] == "frontend-access" {
        grok {
          break_on_match => false
          match => {
            "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
            "syslog_message" => "%{IPORHOST:remote_addr} \"%{NOTSPACE:http_host}\" %{WORD:http_method} \"%{GREEDYDATA:http_uri}\" \"%{GREEDYDATA:http_referer}\" \"%{GREEDYDATA:http_user_agent}\" %{NUMBER:http_status} %{NUMBER:http_length} (?:%{WORD:geo_country}|-) (?:%{NUMBER:geo_latitude}|-) (?:%{NUMBER:geo_longitude}|-)"
          }
          add_field => [ "index_name", "nginx-access" ]
        }

        date {
          match => [ "syslog_timestamp", "MMM d HH:mm:ss" ]
          locale => "en"
          timezone => "Europe/Moscow"
          target => "@timestamp"
        }

        useragent {
            source => "http_user_agent"
            target => "user_agent"
            remove_field => [ "http_user_agent" ]
        }

        if [geo_country] {
          mutate {
            add_field => {
              "[geoip][coordinates]" => "%{geo_latitude}, %{geo_longitude}"
              "[geoip][country]" => "%{geo_country}"
            }
          }
        }

        mutate {
          add_field => {
            "[request][remote_addr]" => "%{remote_addr}"
            "[request][host]" => "%{http_host}"
            "[request][method]" => "%{http_method}"
            "[request][uri]" => "%{http_uri}"
            "[request][referer]" => "%{http_referer}"

            "[response][status]" => "%{http_status}"
            "[response][length]" => "%{http_length}"
          }
        }

        mutate {
          remove_field => [
            "syslog_message",
            "remote_addr",
            "http_host",
            "http_method",
            "http_uri",
            "http_referer",
            "http_status",
            "http_length",
            "geo_country",
            "geo_longitude",
            "geo_latitude"
          ]
        }
    }

    # frontend-error nginx syslog processing
    if [type] == "frontend-error" {
        grok {
          match => {
            "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
          }
          add_field => [ "index_name", "nginx-error" ]
        }

        date {
          match => [ "syslog_timestamp", "MMM d HH:mm:ss" ]
          locale => "en"
          timezone => "Europe/Moscow"
          target => "@timestamp"
        }

    }

    syslog_pri {
    }

    mutate {
        remove_field => [
            "syslog_pid",
            "message",
            "type",
            "syslog_pri",
            "syslog_timestamp",
            "syslog_hostname",
            "syslog_program",
            "syslog_facility_code",
            "syslog_severity_code"
        ]
    }

    if "_grokparsefailure" in [tags] {
        mutate {
            add_field => [ "index_name", "error" ]
        }
    }
}
